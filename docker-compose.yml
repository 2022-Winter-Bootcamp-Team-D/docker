version: "3"

services:
  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 80:80
    #expose:
    #  - 80
    user: root
    # volumes:
    # - static:/usr/src/app/static
    # - media:/usr/src/app/media
    volumes:
      # - static_volume:/backend/static # <-- bind the static volume
      - build_folder:/var/www/frontend
    # - ./nginx/log:/var/log/nginx # nginx log path (require same option on nginx container)
    # networks:
    #   - backend_network
    depends_on:
      - backend
      - frontend

  backend:
    restart: unless-stopped
    container_name: backend
    build:
      context: ./backend/.
      dockerfile: Dockerfile
      # args:
      #   DJANGO_ALLOWED_HOSTS: "*"
      #   DJANGO_SECRET_KEY: "*"
      #   DJANGO_CORS_ORIGIN_WHITELIST: "*"
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/backend/
      # - static_volume:/backend/static # <-- bind the static volume
    # stdin_open: true
    tty: true
    # networks:
    #   - backend_network
    expose:
      - 8000
    env_file:
      - ./backend/.env
    depends_on:
      - redis
    command: gunicorn --bind :8000 backend.wsgi:application

  frontend:
    container_name: frontend
    restart: unless-stopped
    build:
      context: ./react-repo
      dockerfile: Dockerfile
    command: ["yarn", "start"]
    ports:
      - 3000:3000
    volumes:
      - ./react-repo/:/react-repo/
      - build_folder:/react-repo/build
      - ./react-repo/node_modules/:/react-repo/node_modules
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:8000
    tty: true

  elastic:
    build:
      context: ./elastic
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Seoul
    user: root
    restart: always
    privileged: true

  redis:
    image: redis:alpine
    command: 
      - "redis-server"
    container_name: redis
    hostname: redis
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - 6379:6379

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      # - --storage.tsdb.path=/prometheus
      # - --storage.tsdb.retention.time=90d # 90일보다 오래된 metrics는 삭제
      # - --storage.tsdb.retention.size=10GB # 10GB를 넘을 시 오래된 metrics 삭제
      # - --web.enable-admin-api
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    depends_on:
      - backend
    # networks:
    #   - backend_network
    expose:
      - 9090

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - 9100:9100
    expose:
      - 9100

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    # environment:
    #   - GF_SECURITY_ADMIN_USER=admin
    #   - GF_SECURITY_ADMIN_PASSWORD=grafana
    #   - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - 3330:3000
    depends_on:
      - backend
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      # - ./grafana/provisioning:/etc/grafana/provisioning
      # - ./data/grafana:/var/lib/grafana

  # alertmanager:
  #   image: prom/alertmanager:latest
  #   ports:
  #     - 9093:9093
  #   restart: always
  #   volumes:
  #     - ./alertmanager/:/etc/alertmanager/
  #   # networks:
  #   #   - backend_network

  #   command:
  #     - "--config.file=/etc/alertmanager/config.yml"
  #     - "--storage.path=/alertmanager"

volumes:
  build_folder:
  # postgres_data_dev: null
  static_volume:
  prometheus_data: {}
  grafana_data: {}
